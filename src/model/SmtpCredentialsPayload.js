/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SmtpCredentialsPayload model module.
 * @module model/SmtpCredentialsPayload
 * @version 4.0.18
 */
class SmtpCredentialsPayload {
    /**
     * Constructs a new <code>SmtpCredentialsPayload</code>.
     * Create new SMTP Credentials
     * @alias module:model/SmtpCredentialsPayload
     * @param name {String} Name of the Credential for ease of reference. It must be a valid email address.
     */
    constructor(name) { 
        
        SmtpCredentialsPayload.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>SmtpCredentialsPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SmtpCredentialsPayload} obj Optional instance to populate.
     * @return {module:model/SmtpCredentialsPayload} The populated <code>SmtpCredentialsPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SmtpCredentialsPayload();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Expires')) {
                obj['Expires'] = ApiClient.convertToType(data['Expires'], 'Date');
            }
            if (data.hasOwnProperty('RestrictAccessToIPRange')) {
                obj['RestrictAccessToIPRange'] = ApiClient.convertToType(data['RestrictAccessToIPRange'], ['String']);
            }
            if (data.hasOwnProperty('Subaccount')) {
                obj['Subaccount'] = ApiClient.convertToType(data['Subaccount'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Name of the Credential for ease of reference. It must be a valid email address.
 * @member {String} Name
 */
SmtpCredentialsPayload.prototype['Name'] = undefined;

/**
 * Date this SmtpCredential expires.
 * @member {Date} Expires
 */
SmtpCredentialsPayload.prototype['Expires'] = undefined;

/**
 * Which IPs can use this SmtpCredential
 * @member {Array.<String>} RestrictAccessToIPRange
 */
SmtpCredentialsPayload.prototype['RestrictAccessToIPRange'] = undefined;

/**
 * Email of the subaccount for which this SmtpCredential should be created
 * @member {String} Subaccount
 */
SmtpCredentialsPayload.prototype['Subaccount'] = undefined;






export default SmtpCredentialsPayload;

