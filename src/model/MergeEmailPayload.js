/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailContent from './EmailContent';
import MessageAttachment from './MessageAttachment';
import Options from './Options';

/**
 * The MergeEmailPayload model module.
 * @module model/MergeEmailPayload
 * @version 4.0.24
 */
class MergeEmailPayload {
    /**
     * Constructs a new <code>MergeEmailPayload</code>.
     * @alias module:model/MergeEmailPayload
     * @param mergeFile {module:model/MessageAttachment} 
     * @param content {module:model/EmailContent} 
     */
    constructor(mergeFile, content) { 
        
        MergeEmailPayload.initialize(this, mergeFile, content);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mergeFile, content) { 
        obj['MergeFile'] = mergeFile;
        obj['Content'] = content;
    }

    /**
     * Constructs a <code>MergeEmailPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MergeEmailPayload} obj Optional instance to populate.
     * @return {module:model/MergeEmailPayload} The populated <code>MergeEmailPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergeEmailPayload();

            if (data.hasOwnProperty('MergeFile')) {
                obj['MergeFile'] = MessageAttachment.constructFromObject(data['MergeFile']);
            }
            if (data.hasOwnProperty('Content')) {
                obj['Content'] = EmailContent.constructFromObject(data['Content']);
            }
            if (data.hasOwnProperty('Options')) {
                obj['Options'] = Options.constructFromObject(data['Options']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergeEmailPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergeEmailPayload</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MergeEmailPayload.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `MergeFile`
        if (data['MergeFile']) { // data not null
          MessageAttachment.validateJSON(data['MergeFile']);
        }
        // validate the optional field `Content`
        if (data['Content']) { // data not null
          EmailContent.validateJSON(data['Content']);
        }
        // validate the optional field `Options`
        if (data['Options']) { // data not null
          Options.validateJSON(data['Options']);
        }

        return true;
    }


}

MergeEmailPayload.RequiredProperties = ["MergeFile", "Content"];

/**
 * @member {module:model/MessageAttachment} MergeFile
 */
MergeEmailPayload.prototype['MergeFile'] = undefined;

/**
 * @member {module:model/EmailContent} Content
 */
MergeEmailPayload.prototype['Content'] = undefined;

/**
 * @member {module:model/Options} Options
 */
MergeEmailPayload.prototype['Options'] = undefined;






export default MergeEmailPayload;

