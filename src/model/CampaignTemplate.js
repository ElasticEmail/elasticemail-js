/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Utm from './Utm';

/**
 * The CampaignTemplate model module.
 * @module model/CampaignTemplate
 * @version 4.0.26
 */
class CampaignTemplate {
    /**
     * Constructs a new <code>CampaignTemplate</code>.
     * Content of a Campaign
     * @alias module:model/CampaignTemplate
     * @param from {String} Your e-mail with an optional name (e.g.: John Doe <email@domain.com>)
     */
    constructor(from) { 
        
        CampaignTemplate.initialize(this, from);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from) { 
        obj['From'] = from;
    }

    /**
     * Constructs a <code>CampaignTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CampaignTemplate} obj Optional instance to populate.
     * @return {module:model/CampaignTemplate} The populated <code>CampaignTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CampaignTemplate();

            if (data.hasOwnProperty('Poolname')) {
                obj['Poolname'] = ApiClient.convertToType(data['Poolname'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('ReplyTo')) {
                obj['ReplyTo'] = ApiClient.convertToType(data['ReplyTo'], 'String');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
            if (data.hasOwnProperty('TemplateName')) {
                obj['TemplateName'] = ApiClient.convertToType(data['TemplateName'], 'String');
            }
            if (data.hasOwnProperty('AttachFiles')) {
                obj['AttachFiles'] = ApiClient.convertToType(data['AttachFiles'], ['String']);
            }
            if (data.hasOwnProperty('Utm')) {
                obj['Utm'] = Utm.constructFromObject(data['Utm']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CampaignTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CampaignTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CampaignTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Poolname'] && !(typeof data['Poolname'] === 'string' || data['Poolname'] instanceof String)) {
            throw new Error("Expected the field `Poolname` to be a primitive type in the JSON string but got " + data['Poolname']);
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        // ensure the json data is a string
        if (data['ReplyTo'] && !(typeof data['ReplyTo'] === 'string' || data['ReplyTo'] instanceof String)) {
            throw new Error("Expected the field `ReplyTo` to be a primitive type in the JSON string but got " + data['ReplyTo']);
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }
        // ensure the json data is a string
        if (data['TemplateName'] && !(typeof data['TemplateName'] === 'string' || data['TemplateName'] instanceof String)) {
            throw new Error("Expected the field `TemplateName` to be a primitive type in the JSON string but got " + data['TemplateName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AttachFiles'])) {
            throw new Error("Expected the field `AttachFiles` to be an array in the JSON data but got " + data['AttachFiles']);
        }
        // validate the optional field `Utm`
        if (data['Utm']) { // data not null
          Utm.validateJSON(data['Utm']);
        }

        return true;
    }


}

CampaignTemplate.RequiredProperties = ["From"];

/**
 * Name of your custom IP Pool to be used in the sending process
 * @member {String} Poolname
 */
CampaignTemplate.prototype['Poolname'] = undefined;

/**
 * Your e-mail with an optional name (e.g.: John Doe <email@domain.com>)
 * @member {String} From
 */
CampaignTemplate.prototype['From'] = undefined;

/**
 * To what address should the recipients reply to (e.g. John Doe <email@domain.com>)
 * @member {String} ReplyTo
 */
CampaignTemplate.prototype['ReplyTo'] = undefined;

/**
 * Default subject of email.
 * @member {String} Subject
 */
CampaignTemplate.prototype['Subject'] = undefined;

/**
 * Name of template.
 * @member {String} TemplateName
 */
CampaignTemplate.prototype['TemplateName'] = undefined;

/**
 * Names of previously uploaded files that should be sent as downloadable attachments
 * @member {Array.<String>} AttachFiles
 */
CampaignTemplate.prototype['AttachFiles'] = undefined;

/**
 * @member {module:model/Utm} Utm
 */
CampaignTemplate.prototype['Utm'] = undefined;






export default CampaignTemplate;

