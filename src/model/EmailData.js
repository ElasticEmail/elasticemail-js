/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EmailStatus from './EmailStatus';
import EmailView from './EmailView';
import FileInfo from './FileInfo';

/**
 * The EmailData model module.
 * @module model/EmailData
 * @version 4.0.23
 */
class EmailData {
    /**
     * Constructs a new <code>EmailData</code>.
     * @alias module:model/EmailData
     */
    constructor() { 
        
        EmailData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EmailData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailData} obj Optional instance to populate.
     * @return {module:model/EmailData} The populated <code>EmailData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailData();

            if (data.hasOwnProperty('Preview')) {
                obj['Preview'] = EmailView.constructFromObject(data['Preview']);
            }
            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [FileInfo]);
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = EmailStatus.constructFromObject(data['Status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmailData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmailData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Preview`
        if (data['Preview']) { // data not null
          EmailView.validateJSON(data['Preview']);
        }
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                FileInfo.validateJSON(item);
            };
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          EmailStatus.validateJSON(data['Status']);
        }

        return true;
    }


}



/**
 * @member {module:model/EmailView} Preview
 */
EmailData.prototype['Preview'] = undefined;

/**
 * Attachments sent with the email
 * @member {Array.<module:model/FileInfo>} Attachments
 */
EmailData.prototype['Attachments'] = undefined;

/**
 * @member {module:model/EmailStatus} Status
 */
EmailData.prototype['Status'] = undefined;






export default EmailData;

