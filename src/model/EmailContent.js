/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BodyPart from './BodyPart';
import MessageAttachment from './MessageAttachment';
import Utm from './Utm';

/**
 * The EmailContent model module.
 * @module model/EmailContent
 * @version 4.0.26
 */
class EmailContent {
    /**
     * Constructs a new <code>EmailContent</code>.
     * Proper e-mail content
     * @alias module:model/EmailContent
     * @param from {String} Your e-mail with an optional name (e.g.: John Doe <email@domain.com>)
     */
    constructor(from) { 
        
        EmailContent.initialize(this, from);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, from) { 
        obj['From'] = from;
    }

    /**
     * Constructs a <code>EmailContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EmailContent} obj Optional instance to populate.
     * @return {module:model/EmailContent} The populated <code>EmailContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EmailContent();

            if (data.hasOwnProperty('Body')) {
                obj['Body'] = ApiClient.convertToType(data['Body'], [BodyPart]);
            }
            if (data.hasOwnProperty('Merge')) {
                obj['Merge'] = ApiClient.convertToType(data['Merge'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Attachments')) {
                obj['Attachments'] = ApiClient.convertToType(data['Attachments'], [MessageAttachment]);
            }
            if (data.hasOwnProperty('Headers')) {
                obj['Headers'] = ApiClient.convertToType(data['Headers'], {'String': 'String'});
            }
            if (data.hasOwnProperty('Postback')) {
                obj['Postback'] = ApiClient.convertToType(data['Postback'], 'String');
            }
            if (data.hasOwnProperty('EnvelopeFrom')) {
                obj['EnvelopeFrom'] = ApiClient.convertToType(data['EnvelopeFrom'], 'String');
            }
            if (data.hasOwnProperty('From')) {
                obj['From'] = ApiClient.convertToType(data['From'], 'String');
            }
            if (data.hasOwnProperty('ReplyTo')) {
                obj['ReplyTo'] = ApiClient.convertToType(data['ReplyTo'], 'String');
            }
            if (data.hasOwnProperty('Subject')) {
                obj['Subject'] = ApiClient.convertToType(data['Subject'], 'String');
            }
            if (data.hasOwnProperty('TemplateName')) {
                obj['TemplateName'] = ApiClient.convertToType(data['TemplateName'], 'String');
            }
            if (data.hasOwnProperty('AttachFiles')) {
                obj['AttachFiles'] = ApiClient.convertToType(data['AttachFiles'], ['String']);
            }
            if (data.hasOwnProperty('Utm')) {
                obj['Utm'] = Utm.constructFromObject(data['Utm']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EmailContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EmailContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EmailContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Body']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Body'])) {
                throw new Error("Expected the field `Body` to be an array in the JSON data but got " + data['Body']);
            }
            // validate the optional field `Body` (array)
            for (const item of data['Body']) {
                BodyPart.validateJSON(item);
            };
        }
        if (data['Attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Attachments'])) {
                throw new Error("Expected the field `Attachments` to be an array in the JSON data but got " + data['Attachments']);
            }
            // validate the optional field `Attachments` (array)
            for (const item of data['Attachments']) {
                MessageAttachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Postback'] && !(typeof data['Postback'] === 'string' || data['Postback'] instanceof String)) {
            throw new Error("Expected the field `Postback` to be a primitive type in the JSON string but got " + data['Postback']);
        }
        // ensure the json data is a string
        if (data['EnvelopeFrom'] && !(typeof data['EnvelopeFrom'] === 'string' || data['EnvelopeFrom'] instanceof String)) {
            throw new Error("Expected the field `EnvelopeFrom` to be a primitive type in the JSON string but got " + data['EnvelopeFrom']);
        }
        // ensure the json data is a string
        if (data['From'] && !(typeof data['From'] === 'string' || data['From'] instanceof String)) {
            throw new Error("Expected the field `From` to be a primitive type in the JSON string but got " + data['From']);
        }
        // ensure the json data is a string
        if (data['ReplyTo'] && !(typeof data['ReplyTo'] === 'string' || data['ReplyTo'] instanceof String)) {
            throw new Error("Expected the field `ReplyTo` to be a primitive type in the JSON string but got " + data['ReplyTo']);
        }
        // ensure the json data is a string
        if (data['Subject'] && !(typeof data['Subject'] === 'string' || data['Subject'] instanceof String)) {
            throw new Error("Expected the field `Subject` to be a primitive type in the JSON string but got " + data['Subject']);
        }
        // ensure the json data is a string
        if (data['TemplateName'] && !(typeof data['TemplateName'] === 'string' || data['TemplateName'] instanceof String)) {
            throw new Error("Expected the field `TemplateName` to be a primitive type in the JSON string but got " + data['TemplateName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AttachFiles'])) {
            throw new Error("Expected the field `AttachFiles` to be an array in the JSON data but got " + data['AttachFiles']);
        }
        // validate the optional field `Utm`
        if (data['Utm']) { // data not null
          Utm.validateJSON(data['Utm']);
        }

        return true;
    }


}

EmailContent.RequiredProperties = ["From"];

/**
 * List of e-mail body parts, with user-provided MIME types (text/html, text/plain etc)
 * @member {Array.<module:model/BodyPart>} Body
 */
EmailContent.prototype['Body'] = undefined;

/**
 * A key-value collection of custom merge fields, shared between recipients. Should be used in e-mail body like so: {firstname}, {lastname} etc.
 * @member {Object.<String, String>} Merge
 */
EmailContent.prototype['Merge'] = undefined;

/**
 * Attachments provided by sending binary data
 * @member {Array.<module:model/MessageAttachment>} Attachments
 */
EmailContent.prototype['Attachments'] = undefined;

/**
 * A key-value collection of custom e-mail headers.
 * @member {Object.<String, String>} Headers
 */
EmailContent.prototype['Headers'] = undefined;

/**
 * Postback header.
 * @member {String} Postback
 */
EmailContent.prototype['Postback'] = undefined;

/**
 * E-mail with an optional name to be used as the envelope from address (e.g.: John Doe <email@domain.com>)
 * @member {String} EnvelopeFrom
 */
EmailContent.prototype['EnvelopeFrom'] = undefined;

/**
 * Your e-mail with an optional name (e.g.: John Doe <email@domain.com>)
 * @member {String} From
 */
EmailContent.prototype['From'] = undefined;

/**
 * To what address should the recipients reply to (e.g. John Doe <email@domain.com>)
 * @member {String} ReplyTo
 */
EmailContent.prototype['ReplyTo'] = undefined;

/**
 * Default subject of email.
 * @member {String} Subject
 */
EmailContent.prototype['Subject'] = undefined;

/**
 * Name of template.
 * @member {String} TemplateName
 */
EmailContent.prototype['TemplateName'] = undefined;

/**
 * Names of previously uploaded files that should be sent as downloadable attachments
 * @member {Array.<String>} AttachFiles
 */
EmailContent.prototype['AttachFiles'] = undefined;

/**
 * @member {module:model/Utm} Utm
 */
EmailContent.prototype['Utm'] = undefined;






export default EmailContent;

