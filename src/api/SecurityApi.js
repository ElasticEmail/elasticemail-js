/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKey from '../model/ApiKey';
import ApiKeyPayload from '../model/ApiKeyPayload';
import NewApiKey from '../model/NewApiKey';
import NewSmtpCredentials from '../model/NewSmtpCredentials';
import SmtpCredentials from '../model/SmtpCredentials';
import SmtpCredentialsPayload from '../model/SmtpCredentialsPayload';

/**
* Security service.
* @module api/SecurityApi
* @version 4.0.25
*/
export default class SecurityApi {

    /**
    * Constructs a new SecurityApi. 
    * @alias module:api/SecurityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the securityApikeysByNameDelete operation.
     * @callback module:api/SecurityApi~securityApikeysByNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete ApiKey
     * Delete your existing ApiKey. Required Access Level: Security
     * @param {String} name Name of the ApiKey
     * @param {Object} opts Optional parameters
     * @param {String} [subaccount] Email of the subaccount of which ApiKey should be deleted
     * @param {module:api/SecurityApi~securityApikeysByNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securityApikeysByNameDelete(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling securityApikeysByNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'subaccount': opts['subaccount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/security/apikeys/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityApikeysByNameGet operation.
     * @callback module:api/SecurityApi~securityApikeysByNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load ApiKey
     * Load your existing ApiKey info. Required Access Level: Security
     * @param {String} name Name of the ApiKey
     * @param {Object} opts Optional parameters
     * @param {String} [subaccount] Email of the subaccount of which ApiKey should be loaded
     * @param {module:api/SecurityApi~securityApikeysByNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    securityApikeysByNameGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling securityApikeysByNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'subaccount': opts['subaccount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/security/apikeys/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityApikeysByNamePut operation.
     * @callback module:api/SecurityApi~securityApikeysByNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ApiKey
     * Update your existing ApiKey. Required Access Level: Security
     * @param {String} name Name of the ApiKey
     * @param {module:model/ApiKeyPayload} apiKeyPayload 
     * @param {module:api/SecurityApi~securityApikeysByNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    securityApikeysByNamePut(name, apiKeyPayload, callback) {
      let postBody = apiKeyPayload;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling securityApikeysByNamePut");
      }
      // verify the required parameter 'apiKeyPayload' is set
      if (apiKeyPayload === undefined || apiKeyPayload === null) {
        throw new Error("Missing the required parameter 'apiKeyPayload' when calling securityApikeysByNamePut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/security/apikeys/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityApikeysGet operation.
     * @callback module:api/SecurityApi~securityApikeysGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List ApiKeys
     * List all your existing ApiKeys. Required Access Level: Security
     * @param {Object} opts Optional parameters
     * @param {String} [subaccount] Email of the subaccount of which ApiKeys should be loaded
     * @param {module:api/SecurityApi~securityApikeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApiKey>}
     */
    securityApikeysGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'subaccount': opts['subaccount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiKey];
      return this.apiClient.callApi(
        '/security/apikeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securityApikeysPost operation.
     * @callback module:api/SecurityApi~securityApikeysPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add ApiKey
     * Add a new ApiKey. Required Access Level: Security
     * @param {module:model/ApiKeyPayload} apiKeyPayload 
     * @param {module:api/SecurityApi~securityApikeysPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewApiKey}
     */
    securityApikeysPost(apiKeyPayload, callback) {
      let postBody = apiKeyPayload;
      // verify the required parameter 'apiKeyPayload' is set
      if (apiKeyPayload === undefined || apiKeyPayload === null) {
        throw new Error("Missing the required parameter 'apiKeyPayload' when calling securityApikeysPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewApiKey;
      return this.apiClient.callApi(
        '/security/apikeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securitySmtpByNameDelete operation.
     * @callback module:api/SecurityApi~securitySmtpByNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete SMTP Credential
     * Delete your existing SMTP Credentials. Required Access Level: Security
     * @param {String} name Name of the SMTP Credential
     * @param {Object} opts Optional parameters
     * @param {String} [subaccount] Email of the subaccount of which credential should be deleted
     * @param {module:api/SecurityApi~securitySmtpByNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    securitySmtpByNameDelete(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling securitySmtpByNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'subaccount': opts['subaccount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/security/smtp/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securitySmtpByNameGet operation.
     * @callback module:api/SecurityApi~securitySmtpByNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmtpCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load SMTP Credential
     * Load your existing SMTP Credential info. Required Access Level: Security
     * @param {String} name Name of the SMTP Credential
     * @param {Object} opts Optional parameters
     * @param {String} [subaccount] Email of the subaccount of which credential should be loaded
     * @param {module:api/SecurityApi~securitySmtpByNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmtpCredentials}
     */
    securitySmtpByNameGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling securitySmtpByNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'subaccount': opts['subaccount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmtpCredentials;
      return this.apiClient.callApi(
        '/security/smtp/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securitySmtpByNamePut operation.
     * @callback module:api/SecurityApi~securitySmtpByNamePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmtpCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update SMTP Credential
     * Update your existing SMTP Credentials. Required Access Level: Security
     * @param {String} name Name of the SMTP Credential
     * @param {module:model/SmtpCredentialsPayload} smtpCredentialsPayload 
     * @param {module:api/SecurityApi~securitySmtpByNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmtpCredentials}
     */
    securitySmtpByNamePut(name, smtpCredentialsPayload, callback) {
      let postBody = smtpCredentialsPayload;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling securitySmtpByNamePut");
      }
      // verify the required parameter 'smtpCredentialsPayload' is set
      if (smtpCredentialsPayload === undefined || smtpCredentialsPayload === null) {
        throw new Error("Missing the required parameter 'smtpCredentialsPayload' when calling securitySmtpByNamePut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SmtpCredentials;
      return this.apiClient.callApi(
        '/security/smtp/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securitySmtpGet operation.
     * @callback module:api/SecurityApi~securitySmtpGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SmtpCredentials>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List SMTP Credentials
     * List all your existing SMTP Credentials. Required Access Level: Security
     * @param {Object} opts Optional parameters
     * @param {String} [subaccount] Email of the subaccount of which credentials should be listed
     * @param {module:api/SecurityApi~securitySmtpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SmtpCredentials>}
     */
    securitySmtpGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'subaccount': opts['subaccount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SmtpCredentials];
      return this.apiClient.callApi(
        '/security/smtp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securitySmtpPost operation.
     * @callback module:api/SecurityApi~securitySmtpPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewSmtpCredentials} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add SMTP Credential
     * Add new SMTP Credential. Required Access Level: Security
     * @param {module:model/SmtpCredentialsPayload} smtpCredentialsPayload 
     * @param {module:api/SecurityApi~securitySmtpPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewSmtpCredentials}
     */
    securitySmtpPost(smtpCredentialsPayload, callback) {
      let postBody = smtpCredentialsPayload;
      // verify the required parameter 'smtpCredentialsPayload' is set
      if (smtpCredentialsPayload === undefined || smtpCredentialsPayload === null) {
        throw new Error("Missing the required parameter 'smtpCredentialsPayload' when calling securitySmtpPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewSmtpCredentials;
      return this.apiClient.callApi(
        '/security/smtp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
