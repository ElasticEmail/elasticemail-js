/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DomainData from '../model/DomainData';
import DomainDetail from '../model/DomainDetail';
import DomainPayload from '../model/DomainPayload';
import DomainUpdatePayload from '../model/DomainUpdatePayload';

/**
* Domains service.
* @module api/DomainsApi
* @version 4.0.26
*/
export default class DomainsApi {

    /**
    * Constructs a new DomainsApi. 
    * @alias module:api/DomainsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the domainsByDomainDelete operation.
     * @callback module:api/DomainsApi~domainsByDomainDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Domain
     * Deletes configured domain from Account. Required Access Level: ModifySettings
     * @param {String} domain Name of the given domain
     * @param {module:api/DomainsApi~domainsByDomainDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    domainsByDomainDelete(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainsByDomainDelete");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/{domain}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsByDomainGet operation.
     * @callback module:api/DomainsApi~domainsByDomainGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load Domain
     * Retrieve a domain configured for this Account. Required Access Level: ViewSettings
     * @param {String} domain Name of the given domain
     * @param {module:api/DomainsApi~domainsByDomainGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainData}
     */
    domainsByDomainGet(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainsByDomainGet");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainData;
      return this.apiClient.callApi(
        '/domains/{domain}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsByDomainPut operation.
     * @callback module:api/DomainsApi~domainsByDomainPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Domain
     * Updates the specified domain. Required Access Level: ModifySettings
     * @param {String} domain Name of the given domain
     * @param {module:model/DomainUpdatePayload} domainUpdatePayload Updated Domain resource
     * @param {module:api/DomainsApi~domainsByDomainPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainDetail}
     */
    domainsByDomainPut(domain, domainUpdatePayload, callback) {
      let postBody = domainUpdatePayload;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainsByDomainPut");
      }
      // verify the required parameter 'domainUpdatePayload' is set
      if (domainUpdatePayload === undefined || domainUpdatePayload === null) {
        throw new Error("Missing the required parameter 'domainUpdatePayload' when calling domainsByDomainPut");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainDetail;
      return this.apiClient.callApi(
        '/domains/{domain}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsByDomainRestrictedGet operation.
     * @callback module:api/DomainsApi~domainsByDomainRestrictedGetCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check for domain restriction
     * Checking if domain is from free provider, or restricted. Required Access Level: ViewSettings
     * @param {String} domain Name of the given domain
     * @param {module:api/DomainsApi~domainsByDomainRestrictedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    domainsByDomainRestrictedGet(domain, callback) {
      let postBody = null;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainsByDomainRestrictedGet");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/domains/{domain}/restricted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsByDomainVerificationPut operation.
     * @callback module:api/DomainsApi~domainsByDomainVerificationPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify Domain
     * Verifies that required DNS records exist for specified domain. Required Access Level: ModifySettings
     * @param {String} domain Name of the given domain
     * @param {String} body Tracking type used in the Tracking verification
     * @param {module:api/DomainsApi~domainsByDomainVerificationPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainData}
     */
    domainsByDomainVerificationPut(domain, body, callback) {
      let postBody = body;
      // verify the required parameter 'domain' is set
      if (domain === undefined || domain === null) {
        throw new Error("Missing the required parameter 'domain' when calling domainsByDomainVerificationPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling domainsByDomainVerificationPut");
      }

      let pathParams = {
        'domain': domain
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainData;
      return this.apiClient.callApi(
        '/domains/{domain}/verification', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsByEmailDefaultPatch operation.
     * @callback module:api/DomainsApi~domainsByEmailDefaultPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Default
     * Sets a verified email address as default sender. Required Access Level: ModifySettings
     * @param {String} email Default email sender, example: mail@yourdomain.com
     * @param {module:api/DomainsApi~domainsByEmailDefaultPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainDetail}
     */
    domainsByEmailDefaultPatch(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling domainsByEmailDefaultPatch");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DomainDetail;
      return this.apiClient.callApi(
        '/domains/{email}/default', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsGet operation.
     * @callback module:api/DomainsApi~domainsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DomainDetail>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load Domains
     * Returns a list of all domains configured for this Account. Required Access Level: ViewSettings
     * @param {module:api/DomainsApi~domainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DomainDetail>}
     */
    domainsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DomainDetail];
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsPost operation.
     * @callback module:api/DomainsApi~domainsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DomainDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Domain
     * Add new domain to Account. Required Access Level: ModifySettings
     * @param {module:model/DomainPayload} domainPayload Domain to add
     * @param {module:api/DomainsApi~domainsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DomainDetail}
     */
    domainsPost(domainPayload, callback) {
      let postBody = domainPayload;
      // verify the required parameter 'domainPayload' is set
      if (domainPayload === undefined || domainPayload === null) {
        throw new Error("Missing the required parameter 'domainPayload' when calling domainsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DomainDetail;
      return this.apiClient.callApi(
        '/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
