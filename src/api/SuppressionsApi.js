/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Suppression from '../model/Suppression';

/**
* Suppressions service.
* @module api/SuppressionsApi
* @version 4.0.20
*/
export default class SuppressionsApi {

    /**
    * Constructs a new SuppressionsApi. 
    * @alias module:api/SuppressionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the suppressionsBouncesGet operation.
     * @callback module:api/SuppressionsApi~suppressionsBouncesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Suppression>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Bounce List
     * Retrieve your list of bounced emails. Required Access Level: ViewContacts, ViewSuppressions
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Text fragment used for searching.
     * @param {Number} opts.limit Maximum number of returned items.
     * @param {Number} opts.offset How many items should be returned ahead.
     * @param {module:api/SuppressionsApi~suppressionsBouncesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Suppression>}
     */
    suppressionsBouncesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/suppressions/bounces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsBouncesImportPost operation.
     * @callback module:api/SuppressionsApi~suppressionsBouncesImportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Bounces Async
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/SuppressionsApi~suppressionsBouncesImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    suppressionsBouncesImportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['apikey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/suppressions/bounces/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsBouncesPost operation.
     * @callback module:api/SuppressionsApi~suppressionsBouncesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Suppression>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Bounces
     * Add Bounced. Required Access Level: ModifyContacts, ModifySuppressions
     * @param {Array.<String>} requestBody Emails to add as bounces. Limited to 1000 per request
     * @param {module:api/SuppressionsApi~suppressionsBouncesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Suppression>}
     */
    suppressionsBouncesPost(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling suppressionsBouncesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/suppressions/bounces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsByEmailDelete operation.
     * @callback module:api/SuppressionsApi~suppressionsByEmailDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Suppression
     * Delete Suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @param {String} email Proper email address.
     * @param {module:api/SuppressionsApi~suppressionsByEmailDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    suppressionsByEmailDelete(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling suppressionsByEmailDelete");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/suppressions/{email}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsByEmailGet operation.
     * @callback module:api/SuppressionsApi~suppressionsByEmailGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Suppression} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Suppression
     * Retrieve your suppression. Required Access Level: ViewContacts, ViewSuppressions
     * @param {String} email Proper email address.
     * @param {module:api/SuppressionsApi~suppressionsByEmailGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Suppression}
     */
    suppressionsByEmailGet(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling suppressionsByEmailGet");
      }

      let pathParams = {
        'email': email
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Suppression;
      return this.apiClient.callApi(
        '/suppressions/{email}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsComplaintsGet operation.
     * @callback module:api/SuppressionsApi~suppressionsComplaintsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Suppression>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Complaints List
     * Retrieve your list of complaints. Required Access Level: ViewContacts, ViewSuppressions
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Text fragment used for searching.
     * @param {Number} opts.limit Maximum number of returned items.
     * @param {Number} opts.offset How many items should be returned ahead.
     * @param {module:api/SuppressionsApi~suppressionsComplaintsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Suppression>}
     */
    suppressionsComplaintsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/suppressions/complaints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsComplaintsImportPost operation.
     * @callback module:api/SuppressionsApi~suppressionsComplaintsImportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Complaints Async
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/SuppressionsApi~suppressionsComplaintsImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    suppressionsComplaintsImportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['apikey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/suppressions/complaints/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsComplaintsPost operation.
     * @callback module:api/SuppressionsApi~suppressionsComplaintsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Suppression>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Complaints
     * Add Complaints. Required Access Level: ModifyContacts, ModifySuppressions
     * @param {Array.<String>} requestBody Emails to add as complaints. Limited to 1000 per request
     * @param {module:api/SuppressionsApi~suppressionsComplaintsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Suppression>}
     */
    suppressionsComplaintsPost(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling suppressionsComplaintsPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/suppressions/complaints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsGet operation.
     * @callback module:api/SuppressionsApi~suppressionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Suppression>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Suppressions
     * Retrieve your suppressions. Required Access Level: ViewContacts, ViewSuppressions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of returned items.
     * @param {Number} opts.offset How many items should be returned ahead.
     * @param {module:api/SuppressionsApi~suppressionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Suppression>}
     */
    suppressionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/suppressions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsUnsubscribesGet operation.
     * @callback module:api/SuppressionsApi~suppressionsUnsubscribesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Suppression>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Unsubscribes List
     * Retrieve your list of unsubscribes. Required Access Level: ViewContacts, ViewSuppressions
     * @param {Object} opts Optional parameters
     * @param {String} opts.search Text fragment used for searching.
     * @param {Number} opts.limit Maximum number of returned items.
     * @param {Number} opts.offset How many items should be returned ahead.
     * @param {module:api/SuppressionsApi~suppressionsUnsubscribesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Suppression>}
     */
    suppressionsUnsubscribesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/suppressions/unsubscribes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsUnsubscribesImportPost operation.
     * @callback module:api/SuppressionsApi~suppressionsUnsubscribesImportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Unsubscribes Async
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @param {Object} opts Optional parameters
     * @param {File} opts.file 
     * @param {module:api/SuppressionsApi~suppressionsUnsubscribesImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    suppressionsUnsubscribesImportPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = ['apikey'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/suppressions/unsubscribes/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suppressionsUnsubscribesPost operation.
     * @callback module:api/SuppressionsApi~suppressionsUnsubscribesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Suppression>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Unsubscribes
     * Add Unsubscribes. Required Access Level: ModifyContacts, ModifySuppressions
     * @param {Array.<String>} requestBody Emails to add as unsubscribes. Limited to 1000 per request
     * @param {module:api/SuppressionsApi~suppressionsUnsubscribesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Suppression>}
     */
    suppressionsUnsubscribesPost(requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling suppressionsUnsubscribesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apikey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Suppression];
      return this.apiClient.callApi(
        '/suppressions/unsubscribes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
