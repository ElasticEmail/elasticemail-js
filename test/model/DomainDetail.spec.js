/**
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ElasticEmail);
  }
}(this, function(expect, ElasticEmail) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ElasticEmail.DomainDetail();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DomainDetail', function() {
    it('should create an instance of DomainDetail', function() {
      // uncomment below and update the code to test DomainDetail
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be.a(ElasticEmail.DomainDetail);
    });

    it('should have the property domain (base name: "Domain")', function() {
      // uncomment below and update the code to test the property domain
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property defaultDomain (base name: "DefaultDomain")', function() {
      // uncomment below and update the code to test the property defaultDomain
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property spf (base name: "Spf")', function() {
      // uncomment below and update the code to test the property spf
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property dkim (base name: "Dkim")', function() {
      // uncomment below and update the code to test the property dkim
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property MX (base name: "MX")', function() {
      // uncomment below and update the code to test the property MX
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property DMARC (base name: "DMARC")', function() {
      // uncomment below and update the code to test the property DMARC
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property isRewriteDomainValid (base name: "IsRewriteDomainValid")', function() {
      // uncomment below and update the code to test the property isRewriteDomainValid
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property verify (base name: "Verify")', function() {
      // uncomment below and update the code to test the property verify
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property trackingStatus (base name: "TrackingStatus")', function() {
      // uncomment below and update the code to test the property trackingStatus
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property certificateStatus (base name: "CertificateStatus")', function() {
      // uncomment below and update the code to test the property certificateStatus
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property certificateValidationError (base name: "CertificateValidationError")', function() {
      // uncomment below and update the code to test the property certificateValidationError
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property trackingTypeUserRequest (base name: "TrackingTypeUserRequest")', function() {
      // uncomment below and update the code to test the property trackingTypeUserRequest
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property VERP (base name: "VERP")', function() {
      // uncomment below and update the code to test the property VERP
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property customBouncesDomain (base name: "CustomBouncesDomain")', function() {
      // uncomment below and update the code to test the property customBouncesDomain
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property isCustomBouncesDomainDefault (base name: "IsCustomBouncesDomainDefault")', function() {
      // uncomment below and update the code to test the property isCustomBouncesDomainDefault
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property isMarkedForDeletion (base name: "IsMarkedForDeletion")', function() {
      // uncomment below and update the code to test the property isMarkedForDeletion
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

    it('should have the property ownership (base name: "Ownership")', function() {
      // uncomment below and update the code to test the property ownership
      //var instance = new ElasticEmail.DomainDetail();
      //expect(instance).to.be();
    });

  });

}));
